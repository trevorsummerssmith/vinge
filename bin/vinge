#!/usr/bin/env python

import sys
import numpy as np
import kct.argparse

from vinge.format import format_vertex
from vinge.graph import make_graph
from vinge.parser import parse_log_file

def time_weighting(t1,t2):
    tdelta = -abs(t2-t1)
    return np.exp(0.0001 * tdelta.total_seconds())

def main():
    desc = 'vinge: providing next level vernor vinge automation'
    parser = kct.argparse.ArgumentParser(description=desc)
    parser.add_argument('file', help='Log file to parse')
    parser.add_argument('line-number',
                        help='Number in the file on which to start')
    args = parser.parse_args(sys.argv[1:])

    # Parse the file and make the graph
    (log_line_vertices, tag_map, id_map) = parse_log_file(args.file)
    graph = make_graph(log_line_vertices, tag_map, id_map, time_weighting)

    # Do this kind of janky thing for now -- take the log line number to start
    # on at the beginning. Later on we will change this.
    log_line_number = int(getattr(args, 'line-number'))
    posn = None
    for ll in log_line_vertices:
        if ll.line_number == log_line_number:
            posn = ll
    if posn == None:
        print 'unknown line number'
        sys.exit(-1)

    while True:
        print format_vertex(posn)
        print '_' * 10
        nbrs = graph[posn]
        lookup = {}
        for i, nbr in enumerate(nbrs):
            print i, graph[posn][nbr]['weight'], format_vertex(nbr)[:80]
            lookup[i] = nbr
        i = int(input('Go where? '))
        posn = lookup[i]

if __name__ == '__main__':
    main()
