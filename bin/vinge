#!/usr/bin/env python

import sys
import numpy as np
import kct.argparse
import kct.color
import kct.output as output

import vinge.cmd as cmd

from vinge.context import Context
from vinge.format import format_vertex
from vinge.format import shorten_color_str
from vinge.graph import EdgeType
from vinge.graph import make_graph
from vinge.parser import parse_log_file
from vinge.repl import repl

def time_weighting(t1,t2):
    tdelta = -abs(t2-t1)
    return np.exp(0.0001 * tdelta.total_seconds())

def make_default_semexes(graph, transition, transition_op):
    from vinge.semex.semex import ConcatSemex, SensorSemex, StarSemex, TrivialSemex
    from vinge.filters import logline

    # Create (.*) (logline)

    ll_reach_semex = ConcatSemex(transition, transition_op,
                                 StarSemex(transition, transition_op, graph.number_of_nodes(),
                                           TrivialSemex(graph.number_of_nodes()),
                                           length=3.0),
                                 SensorSemex(graph.number_of_nodes(), logline, graph)
                                 )
    return {'ll_reach' : ll_reach_semex}

def _info(string):
    # Prints then flushes
    output.info(string, newline=False)
    sys.stdout.flush()

def init(filename):
    # Janky for now. Let's let this get some more structure then will
    # bust it out.
    # Parse the file and make the graph.
    _info("Parsing log file... ")
    (log_line_vertices, tag_map, id_map) = parse_log_file(filename)
    output.pp("done")

    _info("Creating graph... ")
    graph = make_graph(log_line_vertices, tag_map, id_map, time_weighting)
    output.pp("done")

    # There will be a lot of nodes and edges (print of commas in the output)
    output.pp("  - {0:,d} nodes".format(graph.number_of_nodes()))
    output.pp("  - {0:,d} edges".format(graph.number_of_edges()))

    _info("Computing graph's sparse adjency matrix and linear operator... ")
    ctx = Context(graph)
    output.pp("done")

    # Make some default semexes
    _info("Compiling default path sets... ")
    semexes = make_default_semexes(graph, ctx.transition, ctx.transition_op)
    for name, semex in semexes.items():
        ctx.add_semex(name, semex, active=False)
    output.pp("done")
    return (log_line_vertices, ctx)

def janky_get_posn(ctx, log_line_vertices, log_line_number):
    # Do this kind of janky thing for now -- take the log line number to start
    # on at the beginning. Later on we will change this.
    posn = None
    for idx, ll in enumerate(log_line_vertices):
        if ll.line_number == log_line_number:
            posn = ll
    if posn == None:
        print 'unknown line number'
        sys.exit(-1)
    # return initial position
    return posn

def main():
    desc = 'vinge: providing next level vernor vinge automation'
    parser = kct.argparse.ArgumentParser(description=desc)
    parser.add_argument('file', help='Log file to parse')
    parser.add_argument('line-number',
                        help='Number in the file on which to start')
    args = parser.parse_args(sys.argv[1:])

    # Parse the file and make the graph
    (log_line_vertices, ctx) = init(args.file)
    posn = janky_get_posn(ctx, log_line_vertices, int(getattr(args, 'line-number')))

    # go to the vertex selected on the command line
    args = kct.argparse.Namespace(vertex=posn)
    cmd.go_by_vertex(ctx, args)

    # Get the repl ready and start it
    repl(ctx)

if __name__ == '__main__':
    main()
